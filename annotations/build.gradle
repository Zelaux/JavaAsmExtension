configurations{
    modifiedDependency
}

def lombokVersion = "1.18.32"
def unshadowedLombokJar = file("${buildDir}/libs/unshadows-lombok-${lombokVersion}.jar")

// Таск для разрешения зависимости и внесения изменений
void modifyDependency0(File unshadowedLombokJar){
    // Укажите группу, артефакт и версию вашей зависимости
    def group = 'org.projectlombok'
    def artifact = 'lombok'
    def version = '1.18.32'

    // Разрешаем зависимость
    configurations.modifiedDependency.dependencies.add(
            dependencies.create("${group}:${artifact}:${version}")
    )

    // Получаем зависимость
    def dependency = configurations.modifiedDependency.resolvedConfiguration.firstLevelModuleDependencies.find{
        it.moduleGroup == group && it.moduleName == artifact && it.moduleVersion == version
    }

    if(!dependency){
        println "Зависимость не найдена: ${group}:${artifact}:${version}"
        return
    }
    def jarFile = dependency.moduleArtifacts.find{ it.file.name.endsWith('.jar') }?.file

    if(!jarFile){
        return
    }
    // Создаем временную директорию для распаковки
    def tempDir = file("${buildDir}/temp/from")
    def tempDirTo = file("${buildDir}/temp/to")
    tempDir.deleteDir()
    tempDirTo.deleteDir()
    tempDir.mkdirs()
    tempDirTo.mkdirs()

    // Распаковываем JAR
    ant.unzip(src: jarFile, dest: tempDir)
    println("Hello world")

    def localRoot = new File(tempDir, "SCL.lombok")
    localRoot.eachFileRecurse{ file ->
        // Проверяем, что это файл (не директория)
        if(file.isFile()){
            def oldName = localRoot.relativePath(file)

            // Получаем имя файла и расширение
            if(!oldName.endsWith(".SCL.lombok") || oldName.contains("org/objectweb/asm")){
                //                        println("Delete: " + oldName)
                //                        file.delete()
                return
            }

            def newName = oldName.replaceAll(/\.SCL\.lombok/, '.class')
            //                    println(oldName + "__" + newName)
            if(oldName != newName){
                def newFile = new File(tempDirTo, newName)
                newFile.getParentFile().mkdirs()
                if(!file.renameTo(newFile)) throw new RuntimeException(newFile.canonicalPath)

                println "Переименован: ${oldName} -> ${newFile}"
            }
        }
    }


    // Упаковываем обратно в JAR
    ant.jar(destfile: unshadowedLombokJar){
        fileset(dir: tempDirTo)
    }
}

// Добавляем изменённый JAR в зависимости
if(!unshadowedLombokJar.exists()) modifyDependency0(unshadowedLombokJar)

configure(childProjects.values()){
    sourceSets.main.java.srcDirs = ["src/main"]
    sourceSets.main.resources.srcDirs = ["src/resources"]

    ext.unshadowedLombokJar = unshadowedLombokJar
    apply plugin: 'java'
    tasks.withType(JavaCompile).tap {
        configureEach {
            options.fork = true
            options.compilerArgs += [
                    '--add-exports', 'jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
                    '--add-exports', 'jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
                    '--add-exports', 'jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
                    '--add-exports', 'jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED',
                    '--add-exports', 'jdk.compiler/com.sun.tools.javac.jvm=ALL-UNNAMED',
                    '--add-exports', 'jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED',
                    '--add-exports', 'jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED',
                    '--add-exports', 'jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED',
                    '--add-exports', 'jdk.compiler/com.sun.tools.javac.tree.JCTree=ALL-UNNAMED',
                    '--add-exports', 'jdk.compiler/com.sun.tools.javac.code.Symbol=ALL-UNNAMED',
                    '--add-exports', 'jdk.compiler/com.sun.tools.javac.code.Type=ALL-UNNAMED',
                    '--add-exports', 'jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
                    '--add-exports', 'jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED',
                    '--add-exports', 'jdk.compiler/com.sun.tools.javac.jvm=ALL-UNNAMED',
                    '--add-exports', 'jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED',
                    '--add-exports', 'jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED',
                    '--add-exports', 'jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED',
                    '--add-exports', 'jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED'
            ]
        }
    }
}
