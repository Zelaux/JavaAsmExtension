import java.util.regex.Matcher
import java.util.regex.Pattern

static void generateCodeMapping(File input, File output){
    output.getParentFile().mkdirs();
    Map<String, List<String>> methodToOpcodes = new HashMap<>()
    List<String> currentList = null;
    String regex = "\\s*int\\s+(\\w+)\\s*=\\s*(\\d+);\\s*//\\s*(.*)";
    Pattern pattern = Pattern.compile(regex);
    for(final def line in input.readLines()){

        if(line.trim().startsWith('#')) continue
        Matcher matcher = pattern.matcher(line);

        if(matcher.find() || true){
            String fieldName = matcher.group(1); // Название поля
            String fieldValue = matcher.group(2); // Значение поля
            String comment = matcher.group(3); // Текст комментария

            if(comment != "-"){
                currentList = methodToOpcodes.computeIfAbsent(comment, it -> new ArrayList<>())
            }
            currentList.add(fieldName)
        }
    }
    String indent = "\t\t\t"
    StringBuilder mapMethodCode = new StringBuilder();
    StringBuilder nameToCode = new StringBuilder();
    StringBuilder codeToName = new StringBuilder();
    StringBuilder hasOpcode = new StringBuilder();
    {
        nameToCode.append("public static int code(String name){\n\t\t");
        codeToName.append("public static String name(int code){\n\t\t");
        hasOpcode.append("public static boolean hasOpcodeParam(String methodName){\n\t\t");
        nameToCode.append("switch(name){\n")
        codeToName.append("switch(code){\n")
        hasOpcode.append("switch(methodName){\n")
        for(final Map.Entry<String, List<String>> entry in methodToOpcodes.entrySet()){
            def method = entry.key
            hasOpcode.append(indent).append("case \"" + method + '\":\n')
            hasOpcode.append(indent).append('\t').append("return ").append(entry.value.size()>1).append(';\n')
            for(final def code in entry.value){
                nameToCode.append(indent).append("case \"" + code + '\":\n')
                codeToName.append(indent).append("case " + code + ':\n')
                nameToCode.append(indent).append('\t').append("return ").append(code).append(';\n')
                codeToName.append(indent).append('\t').append("return \"").append(code).append('";\n')
            }
        }
        nameToCode.append("\t\t}\n");
        codeToName.append("\t\t}\n");
        hasOpcode.append("\t\t}\n");
        nameToCode.append("\t\treturn -1;\n\t}\n");
        codeToName.append("\t\treturn null;\n\t}\n");
        hasOpcode.append("\t\treturn false;\n\t}\n");
    }
    {
        mapMethodCode.append("public static String map(int code){\n\t\t");
        mapMethodCode.append("switch(code){\n")
        for(final Map.Entry<String, List<String>> entry in methodToOpcodes.entrySet()){
            def method = entry.key
            for(final def code in entry.value){
                mapMethodCode.append(indent).append("case " + code + ':\n')
            }
            mapMethodCode.append(indent).append('\t').append("return \"").append(method).append('";\n')
        }
        mapMethodCode.append("\t\t}\n");
        mapMethodCode.append("\t\treturn null;\n\t}\n");
    }
    String code = """package asmlib.method.gen;
import static org.objectweb.asm.Opcodes.*;
@SuppressWarnings("ALL")
class ByteCodeMappingInternal{
    $codeToName
    $nameToCode
    $mapMethodCode
    $hasOpcode
}
    """
    output.text = code;
}

generateCodeMapping(file("byte-code-mapping.txt"), file("src/main/asmlib/method/gen/ByteCodeMappingInternal.java"))