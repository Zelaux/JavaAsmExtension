sourceSets.main.java.srcDirs = ["src/main"]
sourceSets.main.resources.srcDirs = ["src/resources"]
dependencies{
    compileOnly 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'

    def asmVersion = '9.5'
    implementation "org.ow2.asm:asm-util:$asmVersion"
    implementation "org.ow2.asm:asm-tree:$asmVersion"
    implementation "org.ow2.asm:asm-analysis:$asmVersion"
    api aproj("analytics:method-return")
    api aproj("util:post-visitor")
    api aproj("util:compile")
    api aproj("util:node")
    api aproj("util:classfile-metadata")

    api aproj("annotations:lombok-plugin-starter")
    compileOnlyApi aproj("annotations:unshadowed-lombok")
}
//region tests
test{
    useJUnitPlatform()
}
dependencies{
    testImplementation(aproj("util:method"))
    testImplementation(aproj("util:node"))
    testImplementation(aproj("util:compile"))
    testImplementation(aproj("util:visitor"))

    testImplementation "com.github.javaparser:javaparser-symbol-solver-core:$jparcerVersion"

    testAnnotationProcessor(project)

}
//endregion
if(System.getenv().containsKey("lombok.plugin.debug_sleep")){
    tasks.withType(JavaCompile).configureEach{
        options.debug = true // Включает отладочную информацию
        options.compilerArgs << '-g' // Явно указывает на включение отладочной информации
        // Явно указывает на включение отладочной информации
        options.forkOptions.jvmArgs << '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5008'
    }
}

