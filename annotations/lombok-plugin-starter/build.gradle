sourceSets.main.java.srcDirs = ["src/main"]
sourceSets.main.resources.srcDirs = ["src/resources"]
dependencies{
    compileOnly 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'


    implementation "com.github.javaparser:javaparser-symbol-solver-core:$jparcerVersion"
    api files(unshadowedLombokJar)
}

// Создаем новую конфигурацию для разрешения зависимости



// Задаем задачу для создания zip-архива
tasks.register('createSCL'){
    dependsOn(compileJava)
    outputs.upToDateWhen{ true } //Do not need write now
    Directory classDirectory = compileJava.destinationDirectory.get()
    doLast{
        def root1Path = classDirectory.getAsFile().toPath()
        //noinspection GroovyAssignabilityCheck
        new File(classDirectory.asFile, "SCL.lombok").deleteDir()
        fileTree(classDirectory.getAsFile()){
            include("**/lombok/")
        }.each{ File file ->

            java.nio.file.Path relativize = root1Path.relativize(file.toPath())

            def newPath = relativize.toString()
            if(newPath.endsWith(".class")){
                newPath = "SCL.lombok\\" + newPath.substring(0, newPath.length() - ".class".length()) + ".SCL.lombok";
            }else{
                newPath = "SCL.lombok\\" + newPath;
            }
            println(newPath)

            def resolve = root1Path.resolve(newPath)
            println(resolve.toString())
            //            file.renameTo(resolve.toFile())
            resolve.parent.toFile().mkdirs()
            file.renameTo(resolve.toFile())
        }
    }
}

//jar.dependsOn(createSCL)
// Указываем, что задача createLombokZip должна выполняться после компиляции
//classes.finalizedBy(createSCL)