import java.lang.reflect.Field

//file:noinspection GroovyAssignabilityCheck
def localRoot = project
allprojects{}
subprojects{
    apply plugin: 'maven-publish'
    group = 'com.github.Zelaux.JavaAsmLib'
    ext.localRoot = localRoot
    ext.all_exports=[
            'jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED',
            'jdk.compiler/com.sun.tools.javac.code.Symbol=ALL-UNNAMED',
            'jdk.compiler/com.sun.tools.javac.code.Type=ALL-UNNAMED',
            'jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
            'jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED',
            'jdk.compiler/com.sun.tools.javac.jvm=ALL-UNNAMED',
            'jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED',
            'jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED',
            'jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED',
            'jdk.compiler/com.sun.tools.javac.tree.JCTree=ALL-UNNAMED',
            'jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
            'jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
    ]
    ext.aproj = { String name ->
        if(localRoot == rootProject) return project(":" + name)
        Project proj = localRoot
        for(final def part in name.split(':')){
            proj = proj.childProjects[part]
        }
        return proj
    }
    repositories{
        mavenCentral()
    }

    ext.devAnnotations = ext.aproj("dev-annotations");
    if(subprojects.size() == 0){

        tasks.withType(JavaCompile).configureEach{
            targetCompatibility = 17
            sourceCompatibility = 17
            options.fork = true

            options.forkOptions.jvmArgs += [
                    '--add-opens=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED',
                    '--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
                    '--add-opens=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED',
                    '--add-opens=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED',
                    '--add-opens=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED',
                    '--add-opens=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
                    '--add-opens=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
                    '--add-opens=java.base/sun.reflect.annotation=ALL-UNNAMED',
            ]
        }
        apply plugin: "java-library"
        //noinspection GroovyAssignabilityCheck
        sourceSets.main.java.srcDirs = ["src/", "$buildDir/generated/sources/annotationProcessor/java/main", "generated/"]
        //noinspection GroovyAssignabilityCheck
        sourceSets.test.java.srcDirs = ["test"]
        //noinspection GroovyAssignabilityCheck
        sourceSets.test.resources.srcDirs = ["test/resources"]
        dependencies{
            testImplementation platform('org.junit:junit-bom:5.9.1')
            testImplementation 'org.junit.jupiter:junit-jupiter'


            def asmVersion = '9.7.1'
            implementation "org.ow2.asm:asm-util:$asmVersion"
            implementation "org.ow2.asm:asm-tree:$asmVersion"
            implementation "org.ow2.asm:asm-analysis:$asmVersion"

            if(project != devAnnotations) compileOnly devAnnotations
            compileOnly "org.jetbrains:annotations:24.0.1"
            testCompileOnly "org.jetbrains:annotations:24.0.1"


            compileOnly 'org.projectlombok:lombok:1.18.32'
            annotationProcessor 'org.projectlombok:lombok:1.18.32'
            testCompileOnly 'org.projectlombok:lombok:1.18.32'
            testAnnotationProcessor 'org.projectlombok:lombok:1.18.32'
        }
        test{
            useJUnitPlatform()
        }

        tasks.withType(Javadoc){
            options{
                addStringOption('Xdoclint:none', '-quiet')
                encoding('UTF-8')
            }
        }
        javadoc{
            // Настройки для Javadoc
            options.encoding = 'UTF-8'
            options.memberLevel = JavadocMemberLevel.PUBLIC
            options.addStringOption("Xdoclint:none", "-quiet")

/*
            *//*-release*//*


            Class<?> clazz = options.getClass()
            Field optionFileField = null
            while(optionFileField == null){
                try{
                    optionFileField = clazz.getDeclaredField("optionFile")
                }catch(NoSuchFieldException e){}
                clazz = clazz.getSuperclass();
            }
            optionFileField.accessible = true;
            def optionFile = optionFileField.get(options)
            clazz = optionFile.getClass()
            Field optionsField = null
            while(optionsField == null){
                try{
                    optionsField = clazz.getDeclaredField("options")
                }catch(NoSuchFieldException e){}
                clazz = clazz.superclass
            }
            optionsField.accessible = true
            Map<String, Object> optionMap = optionsField.get(optionFile);
            optionMap.remove("-release")
            List<String> all=all_exports;
            String exportOptions = all.collect { "--add-exports ${it}" }.join(";")
            for(final def it_ in all){
                options.addStringOption('-add-exports='+it_)
                options.addStringOption('-add-opens='+it_)
            }*/
            failOnError=false
        }

        task sourcesJar(type: Jar, dependsOn: classes){
            archiveClassifier = 'sources'
            from sourceSets.main.allSource
        }
//        task sourcesJar(type: Jar) {
//            // Указываем, какие файлы включать в архив
//            from sourceSets.main.allSource.srcDirs.collect { fileTree(dir: it) {
//                // Исключаем все файлы из каталога build/
//                exclude '**/build/**'
//            } }
//
//            // Указываем имя JAR файла
//            archiveClassifier.set('sources')
//        }
    }
}
ext.asmLibRoot = project

String calculateName(Project proj) {
    //    Set<Project> projects = System.getenv("JITPACK") != "true" ? rootProject.subprojects - project(":test") : rootProject.subprojects
    if(proj.parent == asmLibRoot) return proj.name
    return calculateName(proj.parent) + "-" + proj.name
}


void configure1(Project project) {
    if(project.subprojects.size() != 0) return
//    println project
    //noinspection GroovyAssignabilityCheck
    println(project.group + ":" + calculateName(project) + ":" + project.version)
    configure(project){
        ext.asmRoot = asmLibRoot

        compileJava{
            options.fork = true
            options.incremental = true
        }

        java{
            withJavadocJar()
            withSourcesJar()
        }
        def selfProject = project
        publishing{
            publications{
                maven(MavenPublication){
                    from components.java
                    //group = selfProject.group
                    //version = selfProject.version
                    artifactId = calculateName(selfProject)
                }
            }
        }

    }
}

subprojects{ configure1(project) }

void eachChild(Set<Project> set) {
    configure(set){
        dependencies{
            if(subprojects.size() == 0){
                compileOnly "org.jetbrains:annotations:24.0.1"
                testImplementation 'junit:junit:4.13.1'
                testRuntimeOnly("org.junit.vintage:junit-vintage-engine:5.8.2")
            }
        }
        //        sourceSets
        eachChild(subprojects)
    }
}


eachChild(subprojects)
afterEvaluate{

    //    tasks.getByName('publishToMavenLocal').execute()
}
